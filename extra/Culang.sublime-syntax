%YAML 1.2
---

# To install, copy this file to ~/.config/sublime-text-3/Packages/User/

# See http://www.sublimetext.com/docs/3/syntax.html
# See https://manual.macromates.com/en/language_grammars, section 12.4
file_extensions: [cu]
scope: source.culang

variables:
  control_kw: if|else|while|continue|break|goto|return
  constant_kw: true|false|null
  type_kw: type|struct|module|void
  other_kw: import|extern|export|private
  operator_kw: new|as
  all_kw: '{{control_kw}}|{{constant_kw}}|{{operator_kw}}|{{type_kw}}|{{other_kw}}'
  name: '\b(?!(?:{{all_kw}})\b)(?:(?!\d)\w+|`(?:[^`]|\\.)*`)\b'
  alias: '(?:as\s+{{name}}\s*)'

contexts:

  # All complex syntactic structures
  main:
    - match: \b(new)\s+({{name}})
      captures:
        1: keyword.operator.new.culang
        2: support.type.culang

    - match: (?:\b(void)|({{name}})(?:\s*,\s*({{name}}))*)\s+({{name}})\s*(\()
      captures:
        1: storage.type.culang
        2: support.type.culang
        3: support.type.culang
        4: entity.name.function.culang
        5: punctuation.secion.parameters.begin.culang
      push: parameters

    - match: \b(type|struct)\s+({{name}})
      captures:
        1: storage.type.culang
        2: entity.name.type.culang

    - match: \b(import)\s+({{name}})(?:(\.)({{name}}))*
      scope: meta.import.culang
      captures:
        1: keyword.other.import.culang
        3: punctuation.separator.culang

    - match: ({{name}})\s+(?={{name}})
      captures:
        1: support.type.culang

    - match: \b({{name}})\s*\(
      captures:
        1: variable.function.culang

    - match: '\b({{name}})\s*(:)'
      captures:
        1: entity.name.label.culang
        2: punctuation.separator.culang

    - include: lexical

  parameters:
    - meta_scope: meta.parameters.culang
    - match: \b({{name}})\s*({{name}})?\b
      captures:
        1: support.type.culang
        2: variable.parameter.culang
    - match: ','
      scope: punctuaction.separator.parameter.culang
    - match: \)
      scope: punctuation.secion.parameters.end.culang
      pop: true
    - include: lexical

  # Simple lexical colouring fallthrough
  lexical:
    - include: comments
    - match: (==|!=|<=|>=|<|>)
      scope: keyword.operator.comparison.culang
    - match: (\-|\+|\*|\/|%)
      scope: keyword.operator.arithmetic.culang
    - match: =
      scope: keyword.operator.assignment.culang
    - match: '\b({{control_kw}})\b'
      scope: keyword.control.culang
    - match: '\b({{other_kw}})\b'
      scope: keyword.other.culang
    - match: \b({{constant_kw}})\b
      scope: constant.language.culang
    - match: \b({{type_kw}})\b
      scope: storage.type.culang
    - match: \b({{operator_kw}})\b
      scope: keyword.operator.culang
    - match: '\b\d+\b'
      scope: constant.numeric.culang
    - match: '\b(int|float|bool|char|string)\b' # default types
      scope: support.type.culang
    - match: \'.\'
      scope: constant.character.culang
    - match: \'\\.\'
      scope: constant.character.escape.culang
    - match: \'.+\'
      scope: invalid.illegal.culang
    - match: '"'
      scope: punctuation.definition.string.begin.culang
      push:
        - meta_scope: string.quoted.double.culang
        - include: escapes
        - match: '"'
          scope: punctuation.definition.string.end.culang
          pop: true

  comments:
    - match: /\*
      captures:
        0: punctuation.definition.comment.culang
      push:
        - meta_scope: comment.block.culang
        - match: \*/
          captures:
            0: punctuation.definition.comment.culang
          pop: true
    - match: (//).*$\n?
      scope: comment.line.double-slash.culang
      captures:
        1: punctuation.definition.comment.culang

  escapes:
    - match: \\x[0-9a-f][0-9a-f]
      scope: constant.character.escape.culang
    - match: \\x..
      scope: invalid.illegal.culang
    - match: \\.
      scope: constant.character.escape.culang
